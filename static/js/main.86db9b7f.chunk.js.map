{"version":3,"sources":["components/contactPicker/ContactPicker.js","components/appointmentForm/AppointmentForm.js","components/tile/Tile.js","components/tileList/TileList.js","containers/appointmentsPage/AppointmentsPage.js","components/contactForm/ContactForm.js","containers/contactsPage/ContactsPage.js","App.js","index.js"],"names":["ContactPicker","contacts","onChange","name","selected","value","map","contact","AppointmentForm","title","setTitle","setContact","date","setDate","time","setTime","handleSubmit","onSubmit","type","e","target","required","placeholder","min","Date","toLocaleDateString","split","month","day","year","padStart","getTodayString","Tile","tile","className","Object","values","idx","TileList","tiles","AppointmentsPage","addAppointment","appointments","useState","length","preventDefault","ContactForm","setName","phone","setPhone","email","setEmail","pattern","ContactsPage","addContact","duplicate","setDuplicate","useEffect","undefined","find","App","setAppointments","setContacts","ROUTES","to","activeClassName","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.86db9b7f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ContactPicker = ({contacts, onChange}) => {\r\n  return (\r\n\r\n        <select onChange={onChange} name=\"\" >\r\n          <option \r\n          key={-1} \r\n          selected=\"selected\" \r\n          value=\"\">No Contact Selected</option>\r\n          {contacts.map(\r\n          (contact) => { \r\n            return (\r\n           <option value={contact} key={contact}> {contact}</option> \r\n          )}\r\n        )}\r\n        </select>\r\n    \r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { ContactPicker } from \"../contactPicker/ContactPicker\";\r\n\r\nexport const AppointmentForm = ({\r\n  contacts,\r\n  title,\r\n  setTitle,\r\n  contact,\r\n  setContact,\r\n  date,\r\n  setDate,\r\n  time,\r\n  setTime,\r\n  handleSubmit\r\n}) => {\r\n  const getTodayString = () => {\r\n    const [month, day, year] = new Date()\r\n      .toLocaleDateString(\"en-US\")\r\n      .split(\"/\");\r\n    return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\r\n  };\r\n\r\n  const getContactNames = () => {\r\n    return contacts.map((contact) => contact.name);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} >\r\n      <label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n          placeholder=\"Appointment Title\"\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        <ContactPicker\r\n          name=\"contact\"\r\n          value={contact}\r\n          contacts={getContactNames()}\r\n          onChange={(e) => setContact(e.target.value)}\r\n          placeholder=\"Appointment With\"\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        <input\r\n          type=\"date\"\r\n          name=\"date\"\r\n          min={getTodayString()}\r\n          value={date}\r\n          onChange={(e) => setDate(e.target.value)}\r\n          required\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        <input\r\n          type=\"time\"\r\n          name=\"time\"\r\n          value={time}\r\n          onChange={(e) => setTime(e.target.value)}\r\n          required\r\n        />\r\n      </label>\r\n      <br />\r\n      <button type='submit'>Add Appointment</button>\r\n\r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Tile = ({tile}) => {\r\n\r\n  return (\r\n    <div className=\"tile-container\">\r\n      {\r\n        Object.values(tile).map(\r\n          (value, idx) => (\r\n           <p key={idx} className={`${idx === 0 ? \"title-title\" : \"\"} tile`} > {value}</p> \r\n          )\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Tile } from \"../tile/Tile\";\r\n\r\nexport const TileList = ({tiles}) => {\r\n\r\n  return (\r\n    <div>\r\n      {tiles.map((tile, idx)=>(\r\n         <Tile tile={tile} key={idx}/>\r\n      )  \r\n      )}\r\n      \r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AppointmentForm } from \"../../components/appointmentForm/AppointmentForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\n\r\nexport const AppointmentsPage = ({contacts, addAppointment, appointments}) => {\r\n  /*\r\n  Define state variables for \r\n  appointment info\r\n  */\r\n  const [title, setTitle] = useState(\"\");\r\n  const [contact, setContact] = useState(\r\n    contacts.length > 0 ? contacts[0].name : \"\"\r\n  );\r\n  const [date, setDate] = useState(\"\");\r\n  const [time, setTime] = useState(\"\");\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data  \r\n    */\r\n    addAppointment(title, contact, date, time);\r\n    setTitle(\"\");\r\n    setContact(\"\");\r\n    setDate(\"\");\r\n    setTime(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <section>\r\n        <h2>Add Appointment</h2>\r\n        <AppointmentForm\r\n          contacts={contacts}\r\n          title={title}\r\n          setTitle={setTitle}\r\n          contact={contact}\r\n          setContact={setContact}\r\n          date={date}\r\n          setDate={setDate}\r\n          time={time}\r\n          setTime={setTime}\r\n          handleSubmit={handleSubmit}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Appointments</h2>\r\n        <TileList tiles={appointments} />\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const ContactForm = ({\r\n  name,\r\n  setName,\r\n  phone,\r\n  setPhone,\r\n  email,\r\n  setEmail,\r\n  handleSubmit\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        <input \r\n        name=\"name\"\r\n        value={name} \r\n        type='text' \r\n        onChange={(e)=> setName(e.target.value) } \r\n        required placeholder='Contact Name' />\r\n      </label>\r\n      <br/>\r\n      <label>\r\n        <input \r\n        name=\"email\"\r\n        value={email} \r\n        type='email' \r\n        onChange={(e)=> setEmail(e.target.value) } \r\n        required placeholder='Email address'/>\r\n      </label>\r\n      <br/>\r\n      <label>\r\n        <input \r\n        name=\"phone\"\r\n        value={phone} \r\n        pattern={\"[0-9][0-9][0-9]-[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\"} \r\n        type='tel' \r\n        onChange={(e)=> setPhone(e.target.value) } \r\n        required placeholder='Contact Number' />\r\n      </label> \r\n      <br />\r\n      <button type='submit'>Add contact</button>\r\n    </form>\r\n    \r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({contacts, addContact}) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const [name, setName] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [duplicate, setDuplicate] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    if (!duplicate) {\r\n      addContact(name, phone, email);\r\n      setName(\"\");\r\n      setPhone(\"\");\r\n      setEmail(\"\");\r\n    }\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n  useEffect(() => {\r\n    const nameIsDuplicate = () => {\r\n      const found = contacts.find((contact) => contact.name === name);\r\n      if (found !== undefined) {\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    if (nameIsDuplicate()) {\r\n      setDuplicate(true);\r\n    } else {\r\n      setDuplicate(false);\r\n    }\r\n  }, [name, contacts, duplicate]);\r\n\r\n  return (\r\n    <>\r\n      <section>\r\n        <h2>\r\n          Add Contact\r\n          {duplicate ? \" - Name Already Exists\" : \"\"}\r\n        </h2>\r\n        <ContactForm\r\n          name={name}\r\n          setName={setName}\r\n          phone={phone}\r\n          setPhone={setPhone}\r\n          email={email}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList tiles={contacts} />\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Switch, Route, Redirect, NavLink } from \"react-router-dom\";\r\n\r\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\r\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\r\n\r\n\r\nfunction App() {\r\n  /*\r\n  Define state variables for \r\n  contacts and appointments \r\n  */\r\n  const [appointments, setAppointments] = useState([]);\r\n  const [contacts, setContacts] = useState([]);\r\n\r\n\r\n  const ROUTES = {\r\n    CONTACTS: \"/contacts\",\r\n    APPOINTMENTS: \"/appointsments\",\r\n  };\r\n\r\n  /*\r\n  Implement functions to add data to\r\n  contacts and appointments\r\n  */\r\n\r\n  const addContact = ( name, phone, email ) => {\r\n    /* \r\n    adds a new contact object with that data to the array of contacts\r\n    */\r\n  \r\n setContacts([...contacts, {\r\n  name: name,\r\n  phone: phone,\r\n  email: email\r\n }])\r\n  \r\n  };\r\n\r\n  const addAppointment = ( title, contact, date, time ) => {\r\n    /* \r\n    adds a new contact object with that data to the array of contacts\r\n    */\r\n    setAppointments([\r\n      ...appointments,\r\n      {\r\n        title: title,\r\n        contact: contact,\r\n        date: date,\r\n        time: time,\r\n      },\r\n    ]);\r\n  \r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <NavLink to={ROUTES.CONTACTS} activeClassName=\"active\">\r\n          Contacts\r\n        </NavLink>\r\n        <NavLink to={ROUTES.APPOINTMENTS} activeClassName=\"active\">\r\n          Appointments\r\n        </NavLink>\r\n      </nav>\r\n      <main>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to={ROUTES.CONTACTS} />\r\n          </Route>\r\n          <Route path={ROUTES.CONTACTS}>\r\n             {/* Add props to ContactsPage */}\r\n            <ContactsPage contacts={contacts} addContact={addContact} />\r\n          </Route>\r\n          <Route path={ROUTES.APPOINTMENTS}>\r\n            {/* Add props to AppointmentsPage */}\r\n            <AppointmentsPage contacts={contacts} appointments={appointments} addAppointment={addAppointment} />\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}